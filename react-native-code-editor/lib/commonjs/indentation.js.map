{"version":3,"sources":["indentation.ts"],"names":["INDENT_SIZE","INDENT_SYMBOL","getIndentSize","line","i","length","trimmed","trimEnd","lastChar","substring","addedIndent","Braces","isOpenBrace","getSuggestedIndentSize","lines","trim","createIndentString","indentSize","str"],"mappings":";;;;;;;AAAA;;;;;;AAEO,MAAMA,WAAW,GAAG,CAApB,C,CAAuB;;;AACvB,MAAMC,aAAa,GAAG,GAAtB,C,CAA2B;;AAElC;AACA;AACA;AACA;AACA;;;;AACO,MAAMC,aAAa,GAAIC,IAAD,IAA0B;AACnD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAID,IAAI,CAACC,CAAD,CAAJ,KAAYH,aAAhB,EAA+B;AAC3B,YAAMK,OAAO,GAAGH,IAAI,CAACI,OAAL,EAAhB;AACA,YAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBH,OAAO,CAACD,MAAR,GAAiB,CAAnC,CAAjB,CAF2B,CAG3B;AACA;;AACA,YAAMK,WAAW,GACbC,MAAM,CAACC,WAAP,CAAmBJ,QAAnB,EAA6B,IAA7B,KAAsCA,QAAQ,KAAK,GAAnD,GAAyDR,WAAzD,GAAuE,CAD3E;AAEA,aAAOI,CAAC,GAAGM,WAAX;AACH;AACJ;;AACD,SAAO,CAAP;AACH,CAbM;AAeP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMG,sBAAsB,GAAIC,KAAD,IAA6B;AAC/D,OAAK,IAAIV,CAAC,GAAGU,KAAK,CAACT,MAAN,GAAe,CAA5B,EAA+BD,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,QAAIU,KAAK,CAACV,CAAD,CAAL,CAASW,IAAT,GAAgBV,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,aAAOH,aAAa,CAACY,KAAK,CAACV,CAAD,CAAN,CAApB;AACH;AACJ;;AACD,SAAO,CAAP;AACH,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMY,kBAAkB,GAAG,YAA8C;AAAA,MAA7CC,UAA6C,uEAAxBjB,WAAwB;AAC5E,MAAIkB,GAAG,GAAG,EAAV;;AACA,OAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,UAApB,EAAgCb,CAAC,EAAjC,EAAqC;AACjCc,IAAAA,GAAG,IAAIjB,aAAP;AACH;;AACD,SAAOiB,GAAP;AACH,CANM","sourcesContent":["import * as Braces from './braces';\n\nexport const INDENT_SIZE = 2; // Better for small screens\nexport const INDENT_SYMBOL = ' '; // Spaces over tabs\n\n/**\n * Gets the indentation size of the given line of code.\n * @param line Line of code.\n * @returns number.\n */\nexport const getIndentSize = (line: string): number => {\n    for (let i = 0; i < line.length; i++) {\n        if (line[i] !== INDENT_SYMBOL) {\n            const trimmed = line.trimEnd();\n            const lastChar = trimmed.substring(trimmed.length - 1);\n            // Extra indentation if inside a regular brace.\n            // Inclues colon for python.\n            const addedIndent =\n                Braces.isOpenBrace(lastChar, true) || lastChar === ':' ? INDENT_SIZE : 0;\n            return i + addedIndent;\n        }\n    }\n    return 0;\n};\n\n/**\n * Analyses the lines of code (from end to start) and finds\n * the best indentation size for the new line.\n * @param lines The lines of code to analyze.\n * @returns number\n */\nexport const getSuggestedIndentSize = (lines: string[]): number => {\n    for (let i = lines.length - 1; i >= 0; i--) {\n        if (lines[i].trim().length > 0) {\n            return getIndentSize(lines[i]);\n        }\n    }\n    return 0;\n};\n\n/**\n * Creates an indentation string of the given size.\n * The preset indentation size is used by default.\n * @param indentSize Optional indentation size.\n * @returns string\n */\nexport const createIndentString = (indentSize: number = INDENT_SIZE): string => {\n    let str = '';\n    for (let i = 0; i < indentSize; i++) {\n        str += INDENT_SYMBOL;\n    }\n    return str;\n};\n"]}