{"version":3,"sources":["CodeEditor.tsx"],"names":["CodeEditorSyntaxStyles","SyntaxHighlighterSyntaxStyles","CodeEditor","props","style","language","syntaxStyle","atomOneDark","initialValue","onChange","onKeyPress","showLineNumbers","readOnly","autoFocus","forwardedRef","width","undefined","height","marginTop","marginBottom","inputLineHeight","inputColor","addedStyle","fontFamily","Platform","OS","fontSize","padding","value","setValue","highlighterRef","inputRef","inputSelection","start","end","lineNumbersPadding","current","moveCursor","amount","newPosition","setNativeProps","selection","addIndentation","val","cursorPosition","preLines","substring","split","indentSize","Indentation","getSuggestedIndentSize","indentation","createIndentString","leftChar","rightChar","Braces","isBracePair","addedIndentionSize","isRegularBrace","Math","max","INDENT_SIZE","Strings","insertStringAt","addClosingBrace","key","getCloseBrace","handleChangeText","text","convertTabsToSpaces","handleScroll","e","y","nativeEvent","contentOffset","scrollTo","animated","handleKeyPress","setTimeout","curr","isOpenBrace","handleSelectionChange","styles","input","lineHeight","color","paddingTop","paddingLeft","CodeEditorWithForwardRef","React","forwardRef","ref","StyleSheet","create","position","top","right","bottom","left","textAlignVertical"],"mappings":"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","sourcesContent":["import React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport {\n    View,\n    TextInput,\n    ScrollView,\n    StyleSheet,\n    Platform,\n    ColorValue,\n    NativeSyntheticEvent,\n    TextInputScrollEventData,\n    TextInputKeyPressEventData,\n    TextInputSelectionChangeEventData,\n} from 'react-native';\nimport SyntaxHighlighter, {\n    SyntaxHighlighterStyleType,\n    SyntaxHighlighterSyntaxStyles,\n} from './SyntaxHighlighter';\nimport { Languages } from './languages';\nimport * as Braces from './braces';\nimport * as Indentation from './indentation';\nimport * as Strings from './strings';\n\nexport type CodeEditorStyleType = SyntaxHighlighterStyleType & {\n    /**\n     * Editor height.\n     */\n    height?: string | number;\n\n    /**\n     * Editor width.\n     */\n    width?: string | number;\n\n    /**\n     * Editor top margin.\n     */\n    marginTop?: string | number;\n\n    /**\n     * Editor bottom margin.\n     */\n    marginBottom?: string | number;\n\n    /**\n     * Use this property to align the text input with the syntax highlighter text.\n     * @see highlighterLineHeight\n     */\n    inputLineHeight?: number;\n\n    /**\n     * Use this property to help you align the text input with the syntax highlighter text.\n     * Do not use in production.\n     * @see highlighterColor\n     */\n    inputColor?: ColorValue;\n};\n\nexport const CodeEditorSyntaxStyles = SyntaxHighlighterSyntaxStyles;\n\ntype Props = {\n    /**\n     * Editor styles.\n     */\n    style?: CodeEditorStyleType;\n\n    /**\n     * Programming language to support.\n     */\n    language: Languages;\n\n    /**\n     * Syntax highlighting style.\n     * @See https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_STYLES_HLJS.MD\n     */\n    syntaxStyle?: typeof CodeEditorSyntaxStyles;\n\n    /**\n     * Initial value on render.\n     */\n    initialValue?: string;\n\n    /**\n     * On value change.\n     */\n    onChange?: (newValue: string) => void;\n\n    /**\n     * On key press.\n     */\n    onKeyPress?: (key: string) => void;\n\n    /**\n     * Whether to show line numbers next to each line.\n     */\n    showLineNumbers?: boolean;\n\n    /**\n     * Make the editor read only.\n     */\n    readOnly?: boolean;\n\n    /**\n     * Focus the code editor on component mount.\n     */\n    autoFocus?: boolean;\n};\n\ntype PropsWithForwardRef = Props & {\n    forwardedRef: React.Ref<TextInput>;\n};\n\ntype TextInputSelectionType = {\n    start: number;\n    end: number;\n};\n\nconst CodeEditor = (props: PropsWithForwardRef): JSX.Element => {\n    const {\n        style,\n        language,\n        syntaxStyle = CodeEditorSyntaxStyles.atomOneDark,\n        initialValue = '',\n        onChange,\n        onKeyPress,\n        showLineNumbers = false,\n        readOnly = false,\n        autoFocus = true,\n        forwardedRef,\n    } = props;\n\n    const {\n        width = undefined,\n        height = undefined,\n        marginTop = undefined,\n        marginBottom = undefined,\n        inputLineHeight = undefined,\n        inputColor = 'rgba(0,0,0,0)',\n        ...addedStyle\n    } = style || {};\n\n    const {\n        fontFamily = Platform.OS === 'ios' ? 'Menlo-Regular' : 'monospace',\n        fontSize = 16,\n        padding = 16,\n    } = addedStyle;\n\n    const [value, setValue] = useState<string>(initialValue);\n    const highlighterRef = useRef<ScrollView>(null);\n    const inputRef = useRef<TextInput>(null);\n    const inputSelection = useRef<TextInputSelectionType>({ start: 0, end: 0 });\n\n    // Only when line numbers are showing\n    const lineNumbersPadding = showLineNumbers ? 1.75 * fontSize : undefined;\n\n    // Sync forwardedRef with inputRef\n    useImperativeHandle(forwardedRef, () => inputRef.current!, [inputRef]);\n\n    useEffect(() => {\n        if (onChange) {\n            onChange(value);\n        }\n    }, [onChange, value]);\n\n    // Negative values move the cursor to the left\n    const moveCursor = (current: number, amount: number) => {\n        const newPosition = current + amount;\n        inputRef.current?.setNativeProps({\n            selection: {\n                start: newPosition,\n                end: newPosition,\n            },\n        });\n        return newPosition;\n    };\n\n    const addIndentation = (val: string) => {\n        let cursorPosition = inputSelection.current.start - 1;\n\n        // All lines before the cursor\n        const preLines = val.substring(0, cursorPosition).split('\\n');\n        const indentSize = Indentation.getSuggestedIndentSize(preLines);\n        let indentation = Indentation.createIndentString(indentSize);\n\n        // Add newline and indentation on a regular brace pair\n        const leftChar = val[cursorPosition - 1] || '';\n        const rightChar = val[cursorPosition + 1] || '';\n        if (Braces.isBracePair(leftChar, rightChar)) {\n            let addedIndentionSize = Braces.isRegularBrace(leftChar)\n                ? Math.max(indentSize - Indentation.INDENT_SIZE, 0)\n                : indentSize;\n            indentation += '\\n' + Indentation.createIndentString(addedIndentionSize);\n            // Don't update local cursor position to insert all new changes in one insert call\n            moveCursor(cursorPosition, -addedIndentionSize);\n        }\n\n        return Strings.insertStringAt(val, cursorPosition, indentation);\n    };\n\n    const addClosingBrace = (val: string, key: string) => {\n        let cursorPosition = inputSelection.current.start;\n        cursorPosition = moveCursor(cursorPosition, -1);\n        return Strings.insertStringAt(val, cursorPosition, Braces.getCloseBrace(key));\n    };\n\n    const handleChangeText = (text: string) => {\n        setValue(Strings.convertTabsToSpaces(text));\n    };\n\n    const handleScroll = (e: NativeSyntheticEvent<TextInputScrollEventData>) => {\n        // Match text input scroll with syntax highlighter scroll\n        const y = e.nativeEvent.contentOffset.y;\n        highlighterRef.current?.scrollTo({ y, animated: false });\n    };\n\n    const handleKeyPress = (e: NativeSyntheticEvent<TextInputKeyPressEventData>) => {\n        const key = e.nativeEvent.key;\n        switch (key) {\n            case 'Enter':\n                setTimeout(() => {\n                    setValue((curr) => addIndentation(curr));\n                }, 10);\n                break;\n            default:\n                if (Braces.isOpenBrace(key)) {\n                    setTimeout(() => {\n                        setValue((curr) => addClosingBrace(curr, key));\n                    }, 10);\n                }\n                break;\n        }\n        if (onKeyPress) {\n            onKeyPress(key);\n        }\n    };\n\n    const handleSelectionChange = (e: NativeSyntheticEvent<TextInputSelectionChangeEventData>) => {\n        inputSelection.current = e.nativeEvent.selection;\n    };\n\n    return (\n        <View style={{ width, height, marginTop, marginBottom }}>\n            <SyntaxHighlighter\n                language={language}\n                addedStyle={addedStyle}\n                syntaxStyle={syntaxStyle}\n                scrollEnabled={false}\n                showLineNumbers={showLineNumbers}\n                ref={highlighterRef}\n            >\n                {value}\n            </SyntaxHighlighter>\n            <TextInput\n                style={[\n                    styles.input,\n                    {\n                        lineHeight: inputLineHeight,\n                        color: inputColor,\n                        fontFamily: fontFamily,\n                        fontSize: fontSize,\n                        padding,\n                        paddingTop: padding,\n                        paddingLeft: lineNumbersPadding,\n                    },\n                ]}\n                value={value}\n                onChangeText={handleChangeText}\n                onScroll={handleScroll}\n                onKeyPress={handleKeyPress}\n                onSelectionChange={handleSelectionChange}\n                autoCapitalize=\"none\"\n                autoComplete=\"off\"\n                autoCorrect={false}\n                autoFocus={autoFocus}\n                keyboardType=\"ascii-capable\"\n                editable={!readOnly}\n                ref={inputRef}\n                multiline\n            />\n        </View>\n    );\n};\n\nconst CodeEditorWithForwardRef = React.forwardRef<TextInput, Props>((props, ref) => (\n    <CodeEditor {...props} forwardedRef={ref} />\n));\n\nexport default CodeEditorWithForwardRef;\n\nconst styles = StyleSheet.create({\n    input: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        textAlignVertical: 'top',\n    },\n});\n"]}