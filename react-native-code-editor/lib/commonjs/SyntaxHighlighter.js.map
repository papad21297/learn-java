{"version":3,"sources":["SyntaxHighlighter.tsx"],"names":["SyntaxHighlighterSyntaxStyles","HLJSSyntaxStyles","SyntaxHighlighter","props","syntaxStyle","atomOneDark","addedStyle","scrollEnabled","showLineNumbers","forwardedRef","highlighterProps","fontFamily","Platform","OS","fontSize","backgroundColor","undefined","padding","lineNumbersColor","lineNumbersBackgroundColor","highlighterLineHeight","highlighterColor","lineNumbersPadding","lineNumbersFontSize","children","cleanStyle","style","clean","display","stylesheet","Object","fromEntries","entries","map","className","renderLineNumbersBackground","position","top","left","bottom","width","renderNode","nodes","key","reduce","acc","node","index","textElement","color","hljs","properties","c","lineHeight","paddingLeft","lineNumberElement","length","paddingHorizontal","textAlign","push","value","replace","nativeRenderer","rows","height","background","paddingTop","paddingRight","paddingBottom","View","SyntaxHighlighterWithForwardRef","React","forwardRef","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, ScrollView, Text, Platform, ColorValue, TextStyle } from 'react-native';\nimport Highlighter, { SyntaxHighlighterProps as HighlighterProps } from 'react-syntax-highlighter';\nimport * as HLJSSyntaxStyles from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\ntype Node = {\n    children?: Node[];\n    properties?: {\n        className: string[];\n    };\n    tagName?: string;\n    type: string;\n    value?: string;\n};\n\ntype StyleSheet = {\n    [key: string]: TextStyle & {\n        background?: string;\n    };\n};\n\ntype RendererParams = {\n    rows: Node[];\n    stylesheet: StyleSheet;\n};\n\nexport type SyntaxHighlighterStyleType = {\n    /**\n     * Default is Menlo-Regular (iOS) and Monospace (Android).\n     */\n    fontFamily?: string;\n\n    /**\n     * Default is 16.\n     */\n    fontSize?: number;\n\n    /**\n     * Override the syntax style background.\n     */\n    backgroundColor?: ColorValue;\n\n    /**\n     * Default is 16.\n     */\n    padding?: number;\n\n    /**\n     * Text color of the line numbers.\n     */\n    lineNumbersColor?: ColorValue;\n\n    /**\n     * Background color of the line numbers.\n     */\n    lineNumbersBackgroundColor?: ColorValue;\n\n    /**\n     * Use this property to align the syntax highlighter text with the text input.\n     */\n    highlighterLineHeight?: number;\n\n    /**\n     * Use this property to help you align the syntax highlighter text with the text input.\n     * Do not use in production.\n     */\n    highlighterColor?: ColorValue;\n};\n\nexport const SyntaxHighlighterSyntaxStyles = HLJSSyntaxStyles;\n\nexport type SyntaxHighlighterProps = HighlighterProps & {\n    /**\n     * Code to display.\n     */\n    children: string;\n\n    /**\n     * Syntax highlighting style.\n     * @See https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_STYLES_HLJS.MD\n     */\n    syntaxStyle?: typeof SyntaxHighlighterSyntaxStyles;\n\n    /**\n     * Extra styling options for the syntax highlighter.\n     */\n    addedStyle?: SyntaxHighlighterStyleType;\n\n    /**\n     * Whether to allow scrolling on the syntax highlighter.\n     */\n    scrollEnabled?: boolean;\n};\n\ntype PropsWithForwardRef = SyntaxHighlighterProps & {\n    forwardedRef: React.Ref<ScrollView>;\n};\n\nconst SyntaxHighlighter = (props: PropsWithForwardRef): JSX.Element => {\n    const {\n        syntaxStyle = SyntaxHighlighterSyntaxStyles.atomOneDark,\n        addedStyle,\n        scrollEnabled,\n        showLineNumbers = false,\n        forwardedRef,\n        ...highlighterProps\n    } = props;\n\n    // Default values\n    const {\n        fontFamily = Platform.OS === 'ios' ? 'Menlo-Regular' : 'monospace',\n        fontSize = 16,\n        backgroundColor = undefined,\n        padding = 16,\n        lineNumbersColor = 'rgba(127, 127, 127, 0.9)',\n        lineNumbersBackgroundColor = undefined,\n        highlighterLineHeight = undefined,\n        highlighterColor = undefined,\n    } = addedStyle || {};\n\n    // Only when line numbers are showing\n    const lineNumbersPadding = showLineNumbers ? 1.75 * fontSize : undefined;\n    const lineNumbersFontSize = 0.7 * fontSize;\n\n    // Prevents the last line from clipping when scrolling\n    highlighterProps.children += '\\n\\n';\n\n    const cleanStyle = (style: TextStyle) => {\n        const clean: TextStyle = {\n            ...style,\n            display: undefined,\n        };\n        return clean;\n    };\n\n    const stylesheet: StyleSheet = Object.fromEntries(\n        Object.entries(syntaxStyle as StyleSheet).map(([className, style]) => [\n            className,\n            cleanStyle(style),\n        ])\n    );\n\n    const renderLineNumbersBackground = () => (\n        <View\n            style={{\n                position: 'absolute',\n                top: -padding,\n                left: 0,\n                bottom: 0,\n                width: lineNumbersPadding ? lineNumbersPadding - 5 : 0,\n                backgroundColor: lineNumbersBackgroundColor,\n            }}\n        />\n    );\n\n    const renderNode = (nodes: Node[], key = '0') =>\n        nodes.reduce<React.ReactNode[]>((acc, node, index) => {\n            if (node.children) {\n                const textElement = (\n                    <Text\n                        key={`${key}.${index}`}\n                        style={[\n                            {\n                                color: highlighterColor || stylesheet.hljs.color,\n                            },\n                            ...(node.properties?.className || []).map((c) => stylesheet[c]),\n                            {\n                                lineHeight: highlighterLineHeight,\n                                fontFamily,\n                                fontSize,\n                                paddingLeft: lineNumbersPadding ?? padding,\n                            },\n                        ]}\n                    >\n                        {renderNode(node.children, `${key}.${index}`)}\n                    </Text>\n                );\n\n                const lineNumberElement =\n                    key !== '0' || index >= nodes.length - 2 ? undefined : (\n                        <Text\n                            key={`$line.${index}`}\n                            style={{\n                                position: 'absolute',\n                                top: 5,\n                                bottom: 0,\n                                paddingHorizontal: nodes.length - 2 < 100 ? 5 : 0,\n                                textAlign: 'center',\n                                color: lineNumbersColor,\n                                fontFamily,\n                                fontSize: lineNumbersFontSize,\n                                width: lineNumbersPadding ? lineNumbersPadding - 5 : 0,\n                            }}\n                        >\n                            {index + 1}\n                        </Text>\n                    );\n\n                acc.push(\n                    showLineNumbers && lineNumberElement ? (\n                        <View key={`view.line.${index}`}>\n                            {lineNumberElement}\n                            {textElement}\n                        </View>\n                    ) : (\n                        textElement\n                    )\n                );\n            }\n\n            if (node.value) {\n                // To prevent an empty line after each string\n                node.value = node.value.replace('\\n', '');\n                // To render blank lines at an equal font height\n                node.value = node.value.length ? node.value : ' ';\n                acc.push(node.value);\n            }\n\n            return acc;\n        }, []);\n\n    const nativeRenderer = ({ rows }: RendererParams) => {\n        return (\n            <ScrollView\n                style={[\n                    stylesheet.hljs,\n                    {\n                        width: '100%',\n                        height: '100%',\n                        backgroundColor: backgroundColor || stylesheet.hljs.background,\n                        // Prevents YGValue error\n                        padding: 0,\n                        paddingTop: padding,\n                        paddingRight: padding,\n                        paddingBottom: padding,\n                    },\n                ]}\n                ref={forwardedRef}\n                scrollEnabled={scrollEnabled}\n            >\n                {showLineNumbers && renderLineNumbersBackground()}\n                {renderNode(rows)}\n            </ScrollView>\n        );\n    };\n\n    return (\n        <Highlighter\n            {...highlighterProps}\n            customStyle={{\n                padding: 0,\n            }}\n            CodeTag={View}\n            PreTag={View}\n            renderer={nativeRenderer}\n            style={stylesheet}\n        />\n    );\n};\n\nconst SyntaxHighlighterWithForwardRef = React.forwardRef<ScrollView, SyntaxHighlighterProps>(\n    (props, ref) => <SyntaxHighlighter {...props} forwardedRef={ref} />\n);\n\nexport default SyntaxHighlighterWithForwardRef;\n"]}