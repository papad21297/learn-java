{"version":3,"sources":["braces.ts"],"names":["braces","Map","regularBraces","Set","isOpenBrace","str","onlyRegularBraces","isRegularBrace","has","isCloseBrace","value","values","isBracePair","openBrace","closeBrace","getCloseBrace","get"],"mappings":"AAAA,MAAMA,MAAM,GAAG,IAAIC,GAAJ,CAAwB,CACnC,CAAC,GAAD,EAAM,GAAN,CADmC,EAEnC,CAAC,GAAD,EAAM,GAAN,CAFmC,EAGnC,CAAC,GAAD,EAAM,GAAN,CAHmC,EAInC,CAAC,GAAD,EAAM,GAAN,CAJmC,EAKnC,CAAC,GAAD,EAAM,GAAN,CALmC,EAMnC,CAAC,GAAD,EAAM,GAAN,CANmC,EAOnC,CAAC,GAAD,EAAM,GAAN,CAPmC,CAAxB,CAAf;AAUA,MAAMC,aAAa,GAAG,IAAIC,GAAJ,CAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAhB,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,UAACC,GAAD,EAA8D;AAAA,MAAhDC,iBAAgD,uEAAnB,KAAmB;;AACrF,MAAIA,iBAAiB,IAAI,CAACC,cAAc,CAACF,GAAD,CAAxC,EAA+C;AAC3C,WAAO,KAAP;AACH;;AACD,SAAOL,MAAM,CAACQ,GAAP,CAAWH,GAAX,CAAP;AACH,CALM;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,YAAY,GAAIJ,GAAD,IAA0B;AAClD,OAAK,IAAIK,KAAT,IAAkBV,MAAM,CAACW,MAAP,EAAlB,EAAmC;AAC/B,QAAIN,GAAG,KAAKK,KAAZ,EAAmB;AACf,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,WAAW,GAAG,CAACC,SAAD,EAAoBC,UAApB,KAAoD;AAC3E,MAAI,CAACD,SAAD,IAAc,CAACC,UAAnB,EAA+B;AAC3B,WAAO,KAAP;AACH;;AACD,SAAOV,WAAW,CAACS,SAAD,CAAX,IAA0BE,aAAa,CAACF,SAAD,CAAb,KAA6BC,UAA9D;AACH,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAIV,GAAD,IAAyB;AAClD,SAAOL,MAAM,CAACgB,GAAP,CAAWX,GAAX,KAAmB,EAA1B;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,cAAc,GAAIF,GAAD,IAA0B;AACpD,SAAOH,aAAa,CAACM,GAAd,CAAkBH,GAAlB,CAAP;AACH,CAFM","sourcesContent":["const braces = new Map<string, string>([\n    ['{', '}'],\n    ['(', ')'],\n    ['[', ']'],\n    ['<', '>'],\n    ['\"', '\"'],\n    [\"'\", \"'\"],\n    ['`', '`'],\n]);\n\nconst regularBraces = new Set<string>(['{', '(', '[', '<']);\n\n/**\n * Check if the string is an opening brace.\n * @param str Brace to check.\n * @param onlyRegularBraces Return true only on `{`, `(`, `[`, or `<`.\n * @returns boolean\n */\nexport const isOpenBrace = (str: string, onlyRegularBraces: boolean = false): boolean => {\n    if (onlyRegularBraces && !isRegularBrace(str)) {\n        return false;\n    }\n    return braces.has(str);\n};\n\n/**\n * Check if the string is a closing brace.\n * @param str Brace to check.\n * @returns boolean\n */\nexport const isCloseBrace = (str: string): boolean => {\n    for (let value of braces.values()) {\n        if (str === value) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Checks if the two given characters are a brace pair.\n * @param openBrace Potential open brace.\n * @param closeBrace Potential close brace.\n * @returns boolean\n */\nexport const isBracePair = (openBrace: string, closeBrace: string): boolean => {\n    if (!openBrace || !closeBrace) {\n        return false;\n    }\n    return isOpenBrace(openBrace) && getCloseBrace(openBrace) === closeBrace;\n};\n\n/**\n * Gets the closing brace given the opening brace.\n * Returns an empty string if there is no brace match.\n * @param str Opening brace.\n * @returns string\n */\nexport const getCloseBrace = (str: string): string => {\n    return braces.get(str) || '';\n};\n\n/**\n * Check if the string is a regular brace.\n * Only true on `{`, `(`, `[`, or `<`.\n * @param str Brace to check.\n * @returns boolean\n */\nexport const isRegularBrace = (str: string): boolean => {\n    return regularBraces.has(str);\n};\n"]}