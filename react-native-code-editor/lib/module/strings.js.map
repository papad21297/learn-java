{"version":3,"sources":["strings.ts"],"names":["Indentation","convertTabsToSpaces","str","replace","createIndentString","insertStringAt","position","strToInsert","substring"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,GAAD,IAAyB;AACxD,SAAOA,GAAG,CAACC,OAAJ,CAAY,IAAZ,EAAkBH,WAAW,CAACI,kBAAZ,EAAlB,CAAP;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACH,GAAD,EAAcI,QAAd,EAAgCC,WAAhC,KAAgE;AAC1F,SAAOL,GAAG,CAACM,SAAJ,CAAc,CAAd,EAAiBF,QAAQ,GAAG,CAA5B,IAAiCC,WAAjC,GAA+CL,GAAG,CAACM,SAAJ,CAAcF,QAAQ,GAAG,CAAzB,CAAtD;AACH,CAFM","sourcesContent":["import * as Indentation from './indentation';\n\n/**\n * Converts tabs to the appropriate number of spaces in the given string.\n * @param str Root string.\n * @returns string\n */\nexport const convertTabsToSpaces = (str: string): string => {\n    return str.replace('\\t', Indentation.createIndentString());\n};\n\n/**\n * Inserts a substring into a string at a specific position.\n * @param str Root string.\n * @param position Position to insert.\n * @param strToInsert String to be inserted.\n * @returns string\n */\nexport const insertStringAt = (str: string, position: number, strToInsert: string): string => {\n    return str.substring(0, position + 1) + strToInsert + str.substring(position + 1);\n};\n"]}